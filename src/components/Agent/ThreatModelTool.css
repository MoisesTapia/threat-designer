.status-container {
  border-radius: 10px;
  border: 1px solid;
  padding: 6px 10px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  width: 200px;
  margin-bottom: 16px;
  backdrop-filter: blur(4px);
  
  /* Light theme - same as scroll button */
  background-color: rgba(255, 255, 255, 0.15);
  border-color: rgba(128, 128, 128, 0.4);
  color: #333;
}

.status-container:hover {
  background-color: rgba(255, 255, 255, 0.25);
  border-color: rgba(128, 128, 128, 0.6);
}

/* Dark theme - same as scroll button */
.status-container.dark {
  background-color: rgba(40, 40, 40, 0.2);
  border-color: rgba(180, 180, 180, 0.4);
  color: #e0e0e0;
}

.status-container.dark:hover {
  background-color: rgba(40, 40, 40, 0.3);
  border-color: rgba(180, 180, 180, 0.6);
}

.status-container.expanded {
  width: 100%;
}

/* Keep compact width when there are no children */
.status-container.no-children {
  width: fit-content !important;
}

.status-container.no-children.loading {
  width: fit-content !important;
}

.status-main {
  display: flex;
  align-items: center;
  justify-content: space-between; /* Status on left edge, button on right edge */
  width: 100%;
}

.status-indicator {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 4px;
  min-width: 24px;
  height: 24px;
  font-size: 14px;
  flex: 1; /* Take up available space */
}

.status-content {
  display: flex;
  align-items: center;
  justify-content: flex-end; /* Align dropdown to right edge */
}

.expand-button {
  background: none;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s ease;
  opacity: 0;
  animation: slideIn 0.3s ease forwards;
  animation-delay: 0.3s; /* Changed from 0.1s to 1s to match expandWidth duration */
  border-radius: 4px;
}

/* No hover background - removed hover background changes */
.expand-button:hover {
  /* No background changes */
}

.expand-button.dark:hover {
  /* No background changes */
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-10px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.arrow-icon {
  transition: transform 0.3s ease;
  pointer-events: none;
  color: inherit; /* Use container's text color, not status-specific */
}

.arrow-icon.rotated {
  transform: rotate(180deg);
}

.expanded-content {
  margin-top: 16px;
  padding-top: 16px;
  border-top: 1px solid;
  animation: expandContent 0.3s ease forwards;
  
  /* Light theme */
  border-color: rgba(128, 128, 128, 0.3);
}

.expanded-content.dark {
  border-color: rgba(180, 180, 180, 0.3);
}

@keyframes expandContent {
  from {
    opacity: 0;
    max-height: 0;
  }
  to {
    opacity: 1;
    max-height: 500px;
  }
}

.status-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.status-list-item {
  padding: 8px 12px;
  margin: 4px 0;
  border-radius: 6px;
  font-size: 14px;
  transition: background-color 0.2s ease;
  
  /* Light theme */
  background-color: rgba(255, 255, 255, 0.2);
  color: #555;
}

.status-list-item:hover {
  background-color: rgba(255, 255, 255, 0.3);
}

/* Dark theme for list items */
.expanded-content.dark .status-list-item {
  background-color: rgba(40, 40, 40, 0.3);
  color: #b0b0b0;
}

.expanded-content.dark .status-list-item:hover {
  background-color: rgba(40, 40, 40, 0.4);
}

/* State-specific animations */
.status-container.loading {
  width: fit-content;
}

/* Updated: Only expand width when there are children */
.status-container.success:not(.no-children),
.status-container.error:not(.no-children),
.status-container.pending:not(.no-children) {
  width: 100%;
  animation: expandWidth 0.5s ease forwards;
}

@keyframes expandWidth {
  from {
    width: 250px;
  }
  to {
    width: 100%; /* Changed from 280px to 100% */
    max-width: 600px;
  }
}

.status-text {
  display: inline-block;
  transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 1;
  transform: translateX(0);
  white-space: nowrap;
}

.status-text.animating {
  opacity: 0;
  transform: translateX(-15px);
}

/* For a bouncy entrance effect when new text appears */
.status-text:not(.animating) {
  animation: textSlideIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
}

@keyframes textSlideIn {
  0% {
    opacity: 0;
    transform: translateX(15px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}